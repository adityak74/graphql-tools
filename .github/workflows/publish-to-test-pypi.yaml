name: Publish Python üêç distributions üì¶ to TestPyPI

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-n-publish:
    name: Build and publish Python üêç distributions üì¶ to TestPyPI
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Activate Virtual Environment
        run: source .venv/bin/activate

      - name: Install pypa/build
        run: python3 -m pip install build

      - name: Build a binary wheel and a source tarball
        run: python3 -m build --sdist --wheel --outdir dist/ .

      - name: Determine version increment
        id: bumpversion
        run: |
          title=$(jq --raw-output .pull_request.title "$GITHUB_EVENT_PATH")
          if [[ $title =~ ^.*(major|minor|patch).*$ ]]; then
            echo "::set-output name=version::${BASH_REMATCH[1]}"
          else
            echo "No version increment specified in PR title. Defaulting to 'patch'."
            echo "::set-output name=version::patch"
          fi

      - name: Bump version
        if: github.event_name == 'pull_request'
        run: |
          version=$(echo "${{ steps.bumpversion.outputs.version }}" | tr '[:lower:]' '[:upper:]')
          if [[ $version == "MAJOR" ]]; then
            bumpversion major
          elif [[ $version == "MINOR" ]]; then
            bumpversion minor
          else
            bumpversion patch
          fi

      - name: Publish distribution üì¶ to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
